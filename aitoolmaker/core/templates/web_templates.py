"""
Web templates (HTML/CSS/JS) for AIToolMaker.
Note: These are basic templates. Full website generation is a placeholder for future implementation.
"""

def get_html_template(tool_type: str):
    """Get HTML template for a tool type."""
    
    base_html = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ tool_name }}</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{ tool_name }}</h1>
            <p class="subtitle">Powered by AI</p>
        </header>
        
        <main id="app">
            <!-- Tool-specific content will be inserted here by JavaScript -->
        </main>
        
        <footer>
            <p>Generated by AIToolMaker</p>
        </footer>
    </div>
    
    <script src="js/app.js"></script>
</body>
</html>"""
    
    return base_html


def get_css_template(tool_type: str):
    """Get CSS template for a tool type."""
    
    base_css = """* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.container {
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 800px;
    width: 100%;
    padding: 40px;
}

header {
    text-align: center;
    margin-bottom: 40px;
}

h1 {
    color: #333;
    font-size: 2.5em;
    margin-bottom: 10px;
}

.subtitle {
    color: #666;
    font-size: 1.1em;
}

main {
    margin: 30px 0;
}

textarea, input[type="text"] {
    width: 100%;
    padding: 15px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 16px;
    font-family: inherit;
    margin-bottom: 15px;
    transition: border-color 0.3s;
}

textarea:focus, input[type="text"]:focus {
    outline: none;
    border-color: #667eea;
}

button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 10px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    width: 100%;
}

button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
}

button:active {
    transform: translateY(0);
}

.response {
    background: #f8f9fa;
    border-radius: 10px;
    padding: 20px;
    margin-top: 20px;
    display: none;
}

.response.show {
    display: block;
}

footer {
    text-align: center;
    margin-top: 40px;
    color: #999;
    font-size: 0.9em;
}

.loading {
    text-align: center;
    padding: 20px;
    display: none;
}

.loading.show {
    display: block;
}

.spinner {
    border: 3px solid #f3f3f3;
    border-top: 3px solid #667eea;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}"""
    
    return base_css


def get_js_template(tool_type: str):
    """Get JavaScript template for a tool type."""
    
    base_js = """// AIToolMaker - Generated JavaScript
// Note: This is a basic template. For production use, implement proper API security.

const API_KEY = '{{ api_key }}';
const MODEL = '{{ model }}';

// Warning: Never expose API keys in production client-side code!
console.warn('Warning: API key should be handled server-side in production');

document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    const app = document.getElementById('app');
    
    // Create UI based on tool type
    const toolType = '""" + """{{ tool_type }}""" + """';
    
    if (toolType === 'chatbot') {
        createChatbotUI(app);
    } else if (toolType === 'blog_generator') {
        createBlogGeneratorUI(app);
    } else if (toolType === 'sql_generator') {
        createSQLGeneratorUI(app);
    } else {
        createGenericUI(app);
    }
}

function createChatbotUI(container) {
    container.innerHTML = `
        <div class="chat-container">
            <div id="messages" class="messages"></div>
            <div class="input-area">
                <input type="text" id="userInput" placeholder="Type your message...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    `;
}

function createBlogGeneratorUI(container) {
    container.innerHTML = `
        <div class="blog-generator">
            <input type="text" id="blogTitle" placeholder="Blog Title">
            <input type="text" id="keywords" placeholder="Keywords (comma-separated)">
            <label>Word Count: <span id="wordCountValue">500</span></label>
            <input type="range" id="wordCount" min="200" max="2500" value="500" step="250">
            <button onclick="generateBlog()">Generate Blog</button>
            <div id="response" class="response"></div>
            <div id="loading" class="loading"><div class="spinner"></div></div>
        </div>
    `;
    
    document.getElementById('wordCount').addEventListener('input', function(e) {
        document.getElementById('wordCountValue').textContent = e.target.value;
    });
}

function createSQLGeneratorUI(container) {
    container.innerHTML = `
        <div class="sql-generator">
            <textarea id="queryDescription" rows="4" placeholder="Describe your SQL query..."></textarea>
            <textarea id="dbContext" rows="3" placeholder="Optional: Database schema/context"></textarea>
            <select id="dialect">
                <option>Generic SQL</option>
                <option>PostgreSQL</option>
                <option>MySQL</option>
                <option>SQLite</option>
            </select>
            <button onclick="generateSQL()">Generate SQL Query</button>
            <div id="response" class="response"></div>
            <div id="loading" class="loading"><div class="spinner"></div></div>
        </div>
    `;
}

function createGenericUI(container) {
    container.innerHTML = `
        <div class="generic-tool">
            <textarea id="input" rows="6" placeholder="Enter your input here..."></textarea>
            <button onclick="processInput()">Process</button>
            <div id="response" class="response"></div>
            <div id="loading" class="loading"><div class="spinner"></div></div>
        </div>
    `;
}

async function callGeminiAPI(prompt) {
    // Note: This is a simplified example. In production, use a backend proxy.
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${MODEL}:generateContent?key=${API_KEY}`;
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }]
            })
        });
        
        if (!response.ok) {
            throw new Error('API request failed');
        }
        
        const data = await response.json();
        return data.candidates[0].content.parts[0].text;
    } catch (error) {
        console.error('Error calling Gemini API:', error);
        throw error;
    }
}

function showLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.classList.add('show');
}

function hideLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.classList.remove('show');
}

function showResponse(text) {
    const response = document.getElementById('response');
    if (response) {
        response.textContent = text;
        response.classList.add('show');
    }
}

async function generateBlog() {
    const title = document.getElementById('blogTitle').value;
    const keywords = document.getElementById('keywords').value;
    const wordCount = document.getElementById('wordCount').value;
    
    if (!title) {
        alert('Please enter a blog title');
        return;
    }
    
    showLoading();
    
    const prompt = `Generate a well-structured blog post with the title: "${title}".
    Keywords: "${keywords}".
    Word count: approximately ${wordCount} words.
    Include clear headings and subheadings.`;
    
    try {
        const result = await callGeminiAPI(prompt);
        hideLoading();
        showResponse(result);
    } catch (error) {
        hideLoading();
        alert('Error generating blog: ' + error.message);
    }
}

async function generateSQL() {
    const description = document.getElementById('queryDescription').value;
    const context = document.getElementById('dbContext').value;
    const dialect = document.getElementById('dialect').value;
    
    if (!description) {
        alert('Please enter a query description');
        return;
    }
    
    showLoading();
    
    const prompt = `Create a SQL query based on: ${description}
    ${context ? 'Database context: ' + context : ''}
    ${dialect !== 'Generic SQL' ? 'Dialect: ' + dialect : ''}
    Provide only the SQL query.`;
    
    try {
        const result = await callGeminiAPI(prompt);
        hideLoading();
        showResponse(result);
    } catch (error) {
        hideLoading();
        alert('Error generating SQL: ' + error.message);
    }
}

async function processInput() {
    const input = document.getElementById('input').value;
    
    if (!input) {
        alert('Please enter some input');
        return;
    }
    
    showLoading();
    
    try {
        const result = await callGeminiAPI(input);
        hideLoading();
        showResponse(result);
    } catch (error) {
        hideLoading();
        alert('Error processing input: ' + error.message);
    }
}

async function sendMessage() {
    const input = document.getElementById('userInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Add user message to chat
    addMessage(message, 'user');
    input.value = '';
    
    try {
        const response = await callGeminiAPI(message);
        addMessage(response, 'assistant');
    } catch (error) {
        addMessage('Error: ' + error.message, 'error');
    }
}

function addMessage(text, role) {
    const messages = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}`;
    messageDiv.textContent = text;
    messages.appendChild(messageDiv);
    messages.scrollTop = messages.scrollHeight;
}"""
    
    return base_js
